// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestSave - Use 'TestSaveParams' to pass parameters into this method.
        /// </summary>
        public void TestSave()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uISystemCTreeItem = this.UIOpenaSpreadsheetfileWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIComputerTreeItem.UISystemCTreeItem;
            WinTreeItem uISystemDisposableDiskTreeItem = this.UIOpenaSpreadsheetfileWindow.UITreeViewWindow.UITreeViewTree.UIDesktopTreeItem.UIComputerTreeItem.UISystemDisposableDiskTreeItem;
            WinEdit uINameEdit = this.UIOpenaSpreadsheetfileWindow.UIItemWindow.UIUsersListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow1.UIVellingaListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow2.UISourceListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow3.UIReposListItem.UINameEdit;
            WinEdit uINameEdit4 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow4.UICourse_ExamplesListItem.UINameEdit;
            WinEdit uINameEdit5 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow5.UIPS_SkeletonsListItem.UINameEdit;
            WinEdit uINameEdit6 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow6.UIPS6SkeletonListItem.UINameEdit;
            WinEdit uINameEdit7 = this.UIOpenaSpreadsheetfileWindow.UIItemWindow7.UITestingFilesprdListItem.UINameEdit;
            WinButton uIOpenButton1 = this.UIOpenaSpreadsheetfileWindow.UIOpenWindow.UIOpenButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(33, 25));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(26, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(54, 14));

            // Click 'Desktop' -> 'Computer' -> 'System (C:)' tree item
            Mouse.Click(uISystemCTreeItem, new Point(29, 13));

            // Expand 'Desktop' -> 'Computer' -> 'SystemDisposableDisk (E:)' tree item
            uISystemDisposableDiskTreeItem.Expanded = this.TestSaveParams.UISystemDisposableDiskTreeItemExpanded;

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(0, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(0, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(64, 4));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(30, 10));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(83, 21));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit4, new Point(17, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit5, new Point(39, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit6, new Point(35, 12));

            // Click 'Name' text box
            Mouse.Click(uINameEdit7, new Point(62, 10));

            // Click '&Open' button
            Mouse.Click(uIOpenButton1, new Point(37, 15));
        }
        
        /// <summary>
        /// AssertOpenCorrect - Use 'AssertOpenCorrectExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOpenCorrect()
        {
            #region Variable Declarations
            WinWindow uISpreadsheet1Window = this.UISpreadsheet1Window;
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheet1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentTextBoxEdit = this.UISpreadsheet1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinText uINoNewChangesText = this.UISpreadsheet1Window.UIStatusStrip1StatusBar.UINoNewChangesText;
            #endregion

            // Verify that the 'Name' property of 'Spreadsheet1' window equals 'testingFile.sprd'
            Assert.AreEqual(this.AssertOpenCorrectExpectedValues.UISpreadsheet1WindowName, uISpreadsheet1Window.Name, "Spreadsheet name does not match file name");

            // Verify that the 'Text' property of 'cellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertOpenCorrectExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell name does not match selected");

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals '123'
            Assert.AreEqual(this.AssertOpenCorrectExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Cell value does not match expected value");

            // Verify that the 'Text' property of 'cellContentTextBox' text box equals '123'
            Assert.AreEqual(this.AssertOpenCorrectExpectedValues.UICellContentTextBoxEditText, uICellContentTextBoxEdit.Text, "Cell content does not match expected content");

            // Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
            Assert.AreEqual(this.AssertOpenCorrectExpectedValues.UINoNewChangesTextName, uINoNewChangesText.Name, "Changed status does not match expected");
        }
        
        /// <summary>
        /// TestOpen
        /// </summary>
        public void TestOpen()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenaSpreadsheetfileWindow.UIItemWindow.UITestingFilesprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenaSpreadsheetfileWindow.UIOpenWindow.UIOpenButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(49, 4));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(42, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(22, 11));
        }
        
        /// <summary>
        /// NewFormTest
        /// </summary>
        public void NewFormTest()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(61, 15));
        }
        
        /// <summary>
        /// AssertOpenedNewCorrectly - Use 'AssertOpenedNewCorrectlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOpenedNewCorrectly()
        {
            #region Variable Declarations
            WinWindow uISpreadsheet1Window = this.UISpreadsheet1Window;
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheet1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentTextBoxEdit = this.UISpreadsheet1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinText uINoNewChangesText = this.UISpreadsheet1Window.UIStatusStrip1StatusBar.UINoNewChangesText;
            #endregion

            // Verify that the 'Exists' property of 'Spreadsheet1' window equals 'True'
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UISpreadsheet1WindowExists, uISpreadsheet1Window.Exists, "New form does not exist");

            // Verify that the 'Text' property of 'cellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "A1 is not selected");

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "New form is not empty");

            // Verify that the 'Text' property of 'cellContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UICellContentTextBoxEditText, uICellContentTextBoxEdit.Text, "New form is not empty");

            // Verify that the 'FriendlyName' property of 'Spreadsheet1' window equals 'Spreadsheet1'
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UISpreadsheet1WindowFriendlyName, uISpreadsheet1Window.FriendlyName, "New form has incorrect name");

            // Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
            Assert.AreEqual(this.AssertOpenedNewCorrectlyExpectedValues.UINoNewChangesTextName, uINoNewChangesText.Name, "New form has changes");
        }
        
        /// <summary>
        /// AssertNewFormEmptyCell
        /// </summary>
        public void AssertNewFormEmptyCell()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheet1Window.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentTextBoxEdit = this.UISpreadsheet1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueTextBox' text box equals 'null'
            Assert.IsNull(uICellValueTextBoxEdit.Text, "New form value is not empty");

            // Verify that the 'Text' property of 'cellContentTextBox' text box equals 'null'
            Assert.IsNull(uICellContentTextBoxEdit.Text, "New form content is not empty");
        }
        
        /// <summary>
        /// SavedFile - Use 'SavedFileParams' to pass parameters into this method.
        /// </summary>
        public void SavedFile()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheet1Window.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinEdit uICellContentTextBoxEdit = this.UISpreadsheet1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(460, 41));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(85, 57));

            // Type '=a1' in 'menuStrip1' menu bar
            Keyboard.SendKeys(uIMenuStrip1MenuBar, this.SavedFileParams.UIMenuStrip1MenuBarSendKeys, ModifierKeys.None);

            // Type '=a1' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SavedFileParams.UICellContentTextBoxEditText;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.SavedFileParams.UICellContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Right}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.SavedFileParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'goodbye' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SavedFileParams.UICellContentTextBoxEditText1;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.SavedFileParams.UICellContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Right}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.SavedFileParams.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type '=c1' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SavedFileParams.UICellContentTextBoxEditText2;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.SavedFileParams.UICellContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '{Right}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.SavedFileParams.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type '=d1' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SavedFileParams.UICellContentTextBoxEditText3;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.SavedFileParams.UICellContentTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '{Right}=' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.SavedFileParams.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Type '=e1' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.SavedFileParams.UICellContentTextBoxEditText4;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.SavedFileParams.UICellContentTextBoxEditSendKeys4, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(54, 13));
        }
        
        /// <summary>
        /// AssertChangesSaved - Use 'AssertChangesSavedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertChangesSaved()
        {
            #region Variable Declarations
            WinText uINoNewChangesText = this.UISpreadsheet1Window.UIStatusStrip1StatusBar.UINoNewChangesText;
            #endregion

            // Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
            Assert.AreEqual(this.AssertChangesSavedExpectedValues.UINoNewChangesTextName, uINoNewChangesText.Name, "still has unsaved changes");
        }
        
        /// <summary>
        /// TestSaveKeyShort - Use 'TestSaveKeyShortParams' to pass parameters into this method.
        /// </summary>
        public void TestSaveKeyShort()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uICellContentTextBoxEdit = this.UISpreadsheet1Window.UICellContentTextBoxWindow.UICellContentTextBoxEdit;
            #endregion

            // Type '{Back}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '' in 'cellContentTextBox' text box
            uICellContentTextBoxEdit.Text = this.TestSaveKeyShortParams.UICellContentTextBoxEditText;

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.TestSaveKeyShortParams.UICellContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Left}{Back}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Type '{Left}{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.TestSaveKeyShortParams.UICellContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Left}{Back}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.TestSaveKeyShortParams.UICellContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '{Left}{Back}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys3, ModifierKeys.None);

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.TestSaveKeyShortParams.UICellContentTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '{Left}{Back}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys4, ModifierKeys.None);

            // Type '{Enter}' in 'cellContentTextBox' text box
            Keyboard.SendKeys(uICellContentTextBoxEdit, this.TestSaveKeyShortParams.UICellContentTextBoxEditSendKeys4, ModifierKeys.None);

            // Type '{Left}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys5, ModifierKeys.None);

            // Type 'Control + s' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.TestSaveKeyShortParams.UISpreadsheetPanel1ClientSendKeys6, ModifierKeys.Control);
        }
        
        /// <summary>
        /// AssertSaved - Use 'AssertSavedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSaved()
        {
            #region Variable Declarations
            WinText uINoNewChangesText = this.UISpreadsheet1Window.UIStatusStrip1StatusBar.UINoNewChangesText;
            #endregion

            // Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
            Assert.AreEqual(this.AssertSavedExpectedValues.UINoNewChangesTextName, uINoNewChangesText.Name, "File still has changes");
        }
        
        #region Properties
        public virtual TestSaveParams TestSaveParams
        {
            get
            {
                if ((this.mTestSaveParams == null))
                {
                    this.mTestSaveParams = new TestSaveParams();
                }
                return this.mTestSaveParams;
            }
        }
        
        public virtual AssertOpenCorrectExpectedValues AssertOpenCorrectExpectedValues
        {
            get
            {
                if ((this.mAssertOpenCorrectExpectedValues == null))
                {
                    this.mAssertOpenCorrectExpectedValues = new AssertOpenCorrectExpectedValues();
                }
                return this.mAssertOpenCorrectExpectedValues;
            }
        }
        
        public virtual AssertOpenedNewCorrectlyExpectedValues AssertOpenedNewCorrectlyExpectedValues
        {
            get
            {
                if ((this.mAssertOpenedNewCorrectlyExpectedValues == null))
                {
                    this.mAssertOpenedNewCorrectlyExpectedValues = new AssertOpenedNewCorrectlyExpectedValues();
                }
                return this.mAssertOpenedNewCorrectlyExpectedValues;
            }
        }
        
        public virtual SavedFileParams SavedFileParams
        {
            get
            {
                if ((this.mSavedFileParams == null))
                {
                    this.mSavedFileParams = new SavedFileParams();
                }
                return this.mSavedFileParams;
            }
        }
        
        public virtual AssertChangesSavedExpectedValues AssertChangesSavedExpectedValues
        {
            get
            {
                if ((this.mAssertChangesSavedExpectedValues == null))
                {
                    this.mAssertChangesSavedExpectedValues = new AssertChangesSavedExpectedValues();
                }
                return this.mAssertChangesSavedExpectedValues;
            }
        }
        
        public virtual TestSaveKeyShortParams TestSaveKeyShortParams
        {
            get
            {
                if ((this.mTestSaveKeyShortParams == null))
                {
                    this.mTestSaveKeyShortParams = new TestSaveKeyShortParams();
                }
                return this.mTestSaveKeyShortParams;
            }
        }
        
        public virtual AssertSavedExpectedValues AssertSavedExpectedValues
        {
            get
            {
                if ((this.mAssertSavedExpectedValues == null))
                {
                    this.mAssertSavedExpectedValues = new AssertSavedExpectedValues();
                }
                return this.mAssertSavedExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UISpreadsheet1Window UISpreadsheet1Window
        {
            get
            {
                if ((this.mUISpreadsheet1Window == null))
                {
                    this.mUISpreadsheet1Window = new UISpreadsheet1Window();
                }
                return this.mUISpreadsheet1Window;
            }
        }
        
        public UIOpenaSpreadsheetfileWindow UIOpenaSpreadsheetfileWindow
        {
            get
            {
                if ((this.mUIOpenaSpreadsheetfileWindow == null))
                {
                    this.mUIOpenaSpreadsheetfileWindow = new UIOpenaSpreadsheetfileWindow();
                }
                return this.mUIOpenaSpreadsheetfileWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestSaveParams mTestSaveParams;
        
        private AssertOpenCorrectExpectedValues mAssertOpenCorrectExpectedValues;
        
        private AssertOpenedNewCorrectlyExpectedValues mAssertOpenedNewCorrectlyExpectedValues;
        
        private SavedFileParams mSavedFileParams;
        
        private AssertChangesSavedExpectedValues mAssertChangesSavedExpectedValues;
        
        private TestSaveKeyShortParams mTestSaveKeyShortParams;
        
        private AssertSavedExpectedValues mAssertSavedExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UISpreadsheet1Window mUISpreadsheet1Window;
        
        private UIOpenaSpreadsheetfileWindow mUIOpenaSpreadsheetfileWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Expand 'Desktop' -> 'Computer' -> 'SystemDisposableDisk (E:)' tree item
        /// </summary>
        public bool UISystemDisposableDiskTreeItemExpanded = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenCorrect'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenCorrectExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Spreadsheet1' window equals 'testingFile.sprd'
        /// </summary>
        public string UISpreadsheet1WindowName = "testingFile.sprd";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals '123'
        /// </summary>
        public string UICellValueTextBoxEditText = "123";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentTextBox' text box equals '123'
        /// </summary>
        public string UICellContentTextBoxEditText = "123";
        
        /// <summary>
        /// Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
        /// </summary>
        public string UINoNewChangesTextName = "No New Changes";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenedNewCorrectly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertOpenedNewCorrectlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Spreadsheet1' window equals 'True'
        /// </summary>
        public bool UISpreadsheet1WindowExists = true;
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentTextBox' text box equals ''
        /// </summary>
        public string UICellContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Spreadsheet1' window equals 'Spreadsheet1'
        /// </summary>
        public string UISpreadsheet1WindowFriendlyName = "Spreadsheet1";
        
        /// <summary>
        /// Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
        /// </summary>
        public string UINoNewChangesTextName = "No New Changes";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SavedFile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SavedFileParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'menuStrip1' menu bar
        /// </summary>
        public string UIMenuStrip1MenuBarSendKeys = "=a1";
        
        /// <summary>
        /// Type '=a1' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Right}=";
        
        /// <summary>
        /// Type 'goodbye' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText1 = "goodbye";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Right}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Right}=";
        
        /// <summary>
        /// Type '=c1' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText2 = "=c1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Right}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Right}=";
        
        /// <summary>
        /// Type '=d1' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText3 = "=d1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Right}=' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Right}=";
        
        /// <summary>
        /// Type '=e1' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText4 = "=e1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertChangesSaved'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertChangesSavedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
        /// </summary>
        public string UINoNewChangesTextName = "No New Changes";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestSaveKeyShort'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestSaveKeyShortParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Back}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Back}";
        
        /// <summary>
        /// Type '' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditText = "";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Left}{Back}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "{Left}{Back}";
        
        /// <summary>
        /// Type '{Left}{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys1 = "{Left}{Enter}";
        
        /// <summary>
        /// Type '{Left}{Back}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys2 = "{Left}{Back}";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Left}{Back}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys3 = "{Left}{Back}";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Left}{Back}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys4 = "{Left}{Back}";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentTextBox' text box
        /// </summary>
        public string UICellContentTextBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '{Left}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys5 = "{Left}";
        
        /// <summary>
        /// Type 'Control + s' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys6 = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSaved'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSavedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'No New Changes' label equals 'No New Changes'
        /// </summary>
        public string UINoNewChangesTextName = "No New Changes";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheet1Window : WinWindow
    {
        
        public UISpreadsheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet1");
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UICellContentTextBoxWindow UICellContentTextBoxWindow
        {
            get
            {
                if ((this.mUICellContentTextBoxWindow == null))
                {
                    this.mUICellContentTextBoxWindow = new UICellContentTextBoxWindow(this);
                }
                return this.mUICellContentTextBoxWindow;
            }
        }
        
        public UIStatusStrip1StatusBar UIStatusStrip1StatusBar
        {
            get
            {
                if ((this.mUIStatusStrip1StatusBar == null))
                {
                    this.mUIStatusStrip1StatusBar = new UIStatusStrip1StatusBar(this);
                }
                return this.mUIStatusStrip1StatusBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIA1Window mUIA1Window;
        
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UICellContentTextBoxWindow mUICellContentTextBoxWindow;
        
        private UIStatusStrip1StatusBar mUIStatusStrip1StatusBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet1");
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet1");
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameTextBox";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameTextBoxEdit
        {
            get
            {
                if ((this.mUICellNameTextBoxEdit == null))
                {
                    this.mUICellNameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameTextBoxEdit.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUICellNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueTextBox";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentTextBoxWindow : WinWindow
    {
        
        public UICellContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentTextBox";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentTextBoxEdit
        {
            get
            {
                if ((this.mUICellContentTextBoxEdit == null))
                {
                    this.mUICellContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentTextBoxEdit.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUICellContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStatusStrip1StatusBar : WinStatusBar
    {
        
        public UIStatusStrip1StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinText UINoNewChangesText
        {
            get
            {
                if ((this.mUINoNewChangesText == null))
                {
                    this.mUINoNewChangesText = new WinText(this);
                    #region Search Criteria
                    this.mUINoNewChangesText.SearchProperties[WinText.PropertyNames.Name] = "No New Changes";
                    this.mUINoNewChangesText.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUINoNewChangesText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUINoNewChangesText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("testingFile.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("testingFile.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenaSpreadsheetfileWindow : WinWindow
    {
        
        public UIOpenaSpreadsheetfileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open a Spreadsheet file";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIOpenWindow1 mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIComputerTreeItem UIComputerTreeItem
        {
            get
            {
                if ((this.mUIComputerTreeItem == null))
                {
                    this.mUIComputerTreeItem = new UIComputerTreeItem(this);
                }
                return this.mUIComputerTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIComputerTreeItem mUIComputerTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComputerTreeItem : WinTreeItem
    {
        
        public UIComputerTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Computer";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UISystemCTreeItem
        {
            get
            {
                if ((this.mUISystemCTreeItem == null))
                {
                    this.mUISystemCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUISystemCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "System (C:)";
                    this.mUISystemCTreeItem.SearchProperties["Value"] = "2";
                    this.mUISystemCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUISystemCTreeItem.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUISystemCTreeItem;
            }
        }
        
        public WinTreeItem UISystemDisposableDiskTreeItem
        {
            get
            {
                if ((this.mUISystemDisposableDiskTreeItem == null))
                {
                    this.mUISystemDisposableDiskTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUISystemDisposableDiskTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "SystemDisposableDisk (E:)";
                    this.mUISystemDisposableDiskTreeItem.SearchProperties["Value"] = "2";
                    this.mUISystemDisposableDiskTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISystemDisposableDiskTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUISystemDisposableDiskTreeItem.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUISystemDisposableDiskTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUISystemCTreeItem;
        
        private WinTreeItem mUISystemDisposableDiskTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIUsersListItem UIUsersListItem
        {
            get
            {
                if ((this.mUIUsersListItem == null))
                {
                    this.mUIUsersListItem = new UIUsersListItem(this);
                }
                return this.mUIUsersListItem;
            }
        }
        
        public UITestingFilesprdListItem UITestingFilesprdListItem
        {
            get
            {
                if ((this.mUITestingFilesprdListItem == null))
                {
                    this.mUITestingFilesprdListItem = new UITestingFilesprdListItem(this);
                }
                return this.mUITestingFilesprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUsersListItem mUIUsersListItem;
        
        private UITestingFilesprdListItem mUITestingFilesprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUsersListItem : WinListItem
    {
        
        public UIUsersListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Users";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestingFilesprdListItem : WinListItem
    {
        
        public UITestingFilesprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testingFile.sprd";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIVellingaListItem UIVellingaListItem
        {
            get
            {
                if ((this.mUIVellingaListItem == null))
                {
                    this.mUIVellingaListItem = new UIVellingaListItem(this);
                }
                return this.mUIVellingaListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVellingaListItem mUIVellingaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIVellingaListItem : WinListItem
    {
        
        public UIVellingaListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "vellinga";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UISourceListItem UISourceListItem
        {
            get
            {
                if ((this.mUISourceListItem == null))
                {
                    this.mUISourceListItem = new UISourceListItem(this);
                }
                return this.mUISourceListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISourceListItem mUISourceListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISourceListItem : WinListItem
    {
        
        public UISourceListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Source";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIReposListItem UIReposListItem
        {
            get
            {
                if ((this.mUIReposListItem == null))
                {
                    this.mUIReposListItem = new UIReposListItem(this);
                }
                return this.mUIReposListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIReposListItem mUIReposListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIReposListItem : WinListItem
    {
        
        public UIReposListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Repos";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UICourse_ExamplesListItem UICourse_ExamplesListItem
        {
            get
            {
                if ((this.mUICourse_ExamplesListItem == null))
                {
                    this.mUICourse_ExamplesListItem = new UICourse_ExamplesListItem(this);
                }
                return this.mUICourse_ExamplesListItem;
            }
        }
        #endregion
        
        #region Fields
        private UICourse_ExamplesListItem mUICourse_ExamplesListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICourse_ExamplesListItem : WinListItem
    {
        
        public UICourse_ExamplesListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Course_Examples";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIPS_SkeletonsListItem UIPS_SkeletonsListItem
        {
            get
            {
                if ((this.mUIPS_SkeletonsListItem == null))
                {
                    this.mUIPS_SkeletonsListItem = new UIPS_SkeletonsListItem(this);
                }
                return this.mUIPS_SkeletonsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS_SkeletonsListItem mUIPS_SkeletonsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPS_SkeletonsListItem : WinListItem
    {
        
        public UIPS_SkeletonsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS_Skeletons";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIPS6SkeletonListItem UIPS6SkeletonListItem
        {
            get
            {
                if ((this.mUIPS6SkeletonListItem == null))
                {
                    this.mUIPS6SkeletonListItem = new UIPS6SkeletonListItem(this);
                }
                return this.mUIPS6SkeletonListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6SkeletonListItem mUIPS6SkeletonListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPS6SkeletonListItem : WinListItem
    {
        
        public UIPS6SkeletonListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS6Skeleton";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UITestingFilesprdListItem1 UITestingFilesprdListItem
        {
            get
            {
                if ((this.mUITestingFilesprdListItem == null))
                {
                    this.mUITestingFilesprdListItem = new UITestingFilesprdListItem1(this);
                }
                return this.mUITestingFilesprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestingFilesprdListItem1 mUITestingFilesprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITestingFilesprdListItem1 : WinListItem
    {
        
        public UITestingFilesprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testingFile.sprd";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open a Spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open a Spreadsheet file");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
}
